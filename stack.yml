AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Talking Avatar â€“ S3+CloudFront (SPA) + API Gateway HTTP API + Go Lambda (Polly)

Parameters:
  ProjectName:
    Type: String
    Default: talking-avatar
  PollyVoice:
    Type: String
    Default: Joanna
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: vpc-d83278bd
  PublicSubnetId1:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-cb3d06ae
  PublicSubnetId2:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-9380bed5
  AnimatorImageUri:
    Type: String
    Default: 775204092163.dkr.ecr.ap-southeast-2.amazonaws.com/talking-avatar-animator:0.0.3
  UbuntuAmiId:
    Type: AWS::EC2::Image::Id
    Default: ami-0e7a5785ab62399cb
  ContainerPort:
    Type: Number
    Default: 8000
  DesiredCapacity:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 3
  Timezone:
    Type: String
    Default: Australia/Sydney

Resources:
  # -------------------- Lambda Function --------------------
  HealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-health
      Runtime: provided.al2023
      Handler: health
      CodeUri: backend/build/
      Events:
        Api:
          Type: Api
          Properties:
            Path: /health
            Method: GET
            RestApiId:
              Ref: Endpoints

  ChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-chat
      Runtime: provided.al2023
      Handler: chat
      CodeUri: backend/build/
      Events:
        Api:
          Type: Api
          Properties:
            Path: /chat
            Method: POST
            RestApiId:
              Ref: Endpoints
      Environment:
        Variables:
          POLLY_VOICE: !Ref PollyVoice
          ASSETS_BUCKET: !Ref AssetsBucket
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - polly:SynthesizeSpeech
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub ${AssetsBucket.Arn}/*

  UploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-upload-url
      Runtime: provided.al2023
      Handler: upload-url
      CodeUri: backend/build/
      Events:
        Api:
          Type: Api
          Properties:
            Path: /upload-url
            Method: POST
            RestApiId:
              Ref: Endpoints
      Environment:
        Variables:
          ASSETS_BUCKET: !Ref AssetsBucket
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub ${AssetsBucket.Arn}/*

  AvatarFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-avatar
      Runtime: provided.al2023
      Handler: avatar
      CodeUri: backend/build/
      Timeout: 60
      MemorySize: 512
      Events:
        Api:
          Type: Api
          Properties:
            Path: /avatar
            Method: POST
            RestApiId:
              Ref: Endpoints
      Environment:
        Variables:
          ASSETS_BUCKET: !Ref AssetsBucket
          BEDROCK_REGION: us-east-1
          IMAGE_MODEL_ID: amazon.titan-image-generator-v1
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource:
              - !Sub arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-image-generator-v1
        - Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: !Sub ${AssetsBucket.Arn}/*

  # -------------------- API Gateway (HTTP API) --------------------

  Endpoints:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Latest
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,Authorization,X-Requested-With'"
        AllowMethods: "'GET,POST,OPTIONS'"
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        paths:
          /health:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HealthFunction.Arn}/invocations
              responses: {}
          /chat:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatFunction.Arn}/invocations
              responses: {}
          /upload-url:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadUrlFunction.Arn}/invocations
              responses: {}
          /avatar:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AvatarFunction.Arn}/invocations
              responses: {}

  # -------------------- Animator --------------------

  AnimatorALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ProjectName}-animator-alb-sg
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: HTTP from anywhere (demo)
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  AnimatorEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ProjectName}-animator-ec2-sg
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: ALB to container
          IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref AnimatorALBSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  AnimatorALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-animator-alb
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnetId1, !Ref PublicSubnetId2]
      SecurityGroups: [!Ref AnimatorALBSG]

  AnimatorTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-animator-tg
      TargetType: instance
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: '200'

  AnimatorALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AnimatorALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AnimatorTG

  AnimatorInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-animator-ec2-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: AnimatorEC2Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ECRPull
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:DescribeImages
                  - ecr:BatchCheckLayerAvailability
                Resource: "*"
              - Sid: S3ReadAssets
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub ${AssetsBucket.Arn}/*
              - Sid: S3ReadEc2LinuxNvidiaDrivers
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::ec2-linux-nvidia-drivers
                  - arn:aws:s3:::ec2-linux-nvidia-drivers/*
              - Sid: CWLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  AnimatorInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref AnimatorInstanceRole]

  AnimatorLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-animator-lt
      VersionDescription: g6.2xlarge instance type v8
      LaunchTemplateData:
        ImageId: !Ref UbuntuAmiId
        InstanceType: g6.2xlarge
        IamInstanceProfile:
          Arn: !GetAtt AnimatorInstanceProfile.Arn
        MetadataOptions:
          HttpTokens: required
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs: { VolumeSize: 200, VolumeType: gp3, DeleteOnTermination: true }
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref AnimatorEC2SG
        UserData:
          Fn::Base64: !Sub |
            #!/usr/bin/env bash
            # SALT v8
            set -euxo pipefail
            exec > >(tee -a /var/log/user-data.log) 2>&1

            APP_PORT='${ContainerPort}'
            IMAGE_URI='775204092163.dkr.ecr.ap-southeast-2.amazonaws.com/talking-avatar-animator:0.0.4'
            REGION='${AWS::Region}'

            echo "== Stage 0: base packages =="
            apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get install -y \
              curl ca-certificates gnupg lsb-release unzip \
              docker.io

            echo "== Stage 1: NVIDIA driver (â‰¥550) =="
            # Try 570, fall back to 560/550, then autoinstall if needed
            if ! DEBIAN_FRONTEND=noninteractive apt-get install -y nvidia-driver-570; then
              if ! DEBIAN_FRONTEND=noninteractive apt-get install -y nvidia-driver-560; then
                if ! DEBIAN_FRONTEND=noninteractive apt-get install -y nvidia-driver-550; then
                  ubuntu-drivers autoinstall || true
                fi
              fi
            fi
            # Attempt to load module without reboot
            modprobe nvidia || true

            echo "== Stage 2: NVIDIA container toolkit =="
            # Add NVIDIA libnvidia-container repo
            curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | \
              gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
            curl -fsSL https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
              sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#' | \
              tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
            apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get install -y nvidia-container-toolkit

            # Set default Docker runtime to nvidia (via nvidia-ctk)
            nvidia-ctk runtime configure --runtime=docker --set-as-default
            systemctl enable --now docker
            systemctl restart docker

            echo "== Stage 3: Sanity checks =="
            nvidia-smi || true
            docker run --rm --gpus all nvidia/cuda:12.3.2-runtime-ubuntu22.04 nvidia-smi || true

            echo "== Stage 4: AWS CLI v2 =="
            curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
            unzip -q /tmp/awscliv2.zip -d /tmp
            /tmp/aws/install -i /usr/local/aws-cli -b /usr/local/bin
            aws --version

            echo "== Stage 5: ECR login & run animator =="
            ECR_HOST="$(echo "$IMAGE_URI" | awk -F/ '{print $1}')"
            aws ecr get-login-password --region "$REGION" | docker login --username AWS --password-stdin "$ECR_HOST"

            docker pull "$IMAGE_URI" || (sleep 5 && docker pull "$IMAGE_URI")
            docker rm -f animator || true
            docker run -d --name animator --restart=always --gpus all \
              -e AWS_REGION="$REGION" \
              -e PORT="$APP_PORT" \
              -p $APP_PORT:$APP_PORT \
              "$IMAGE_URI"

            echo "== Stage 6: Health check =="
            for i in {1..60}; do
              if curl -fsS "http://127.0.0.1:$APP_PORT/" >/dev/null; then
                echo "Animator up"
                exit 0
              fi
              sleep 2
            done
            echo "Animator failed to start"
            exit 1

  AnimatorASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PublicSubnetId1, !Ref PublicSubnetId2]
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: !Ref DesiredCapacity
      LaunchTemplate:
        LaunchTemplateId: !Ref AnimatorLaunchTemplate
        Version: !GetAtt AnimatorLaunchTemplate.LatestVersionNumber
      TargetGroupARNs: [!Ref AnimatorTG]
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-animator
          PropagateAtLaunch: true

  # -------------------- S3 bucket for assets --------------------

  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-${AWS::AccountId}-assets
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [GET, PUT, HEAD]
            AllowedOrigins: ['*']
            AllowedHeaders: ['*']
            ExposedHeaders: ['ETag']
            MaxAge: 3000

  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AssetsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceTLSONLY
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub ${AssetsBucket.Arn}
              - !Sub ${AssetsBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  # -------------------- S3 bucket for SPA --------------------

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-${AWS::AccountId}-web
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      VersioningConfiguration:
        Status: Enabled

  # OAC for CloudFront to access S3
  CFOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: !Sub OAC for ${ProjectName}
        Name: !Sub ${ProjectName}-oac
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !GetAtt CFOriginAccessControl.Id
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontRead
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${WebsiteBucket.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

Outputs:
  APIBaseUrl:
    Value: !Sub "https://${Endpoints}.execute-api.${AWS::Region}.amazonaws.com/Latest"
  WebsiteBucket:
    Value: !Ref WebsiteBucket
  CloudFrontDistributionId:
    Value: !Ref CloudFrontDistribution
  CloudFrontDomainName:
    Value: !GetAtt CloudFrontDistribution.DomainName
  AnimatorURL:
    Description: Public URL of the Animator service (HTTP)
    Value: !Sub http://${AnimatorALB.DNSName}
