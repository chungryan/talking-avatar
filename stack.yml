AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Talking Avatar â€“ S3+CloudFront (SPA) + API Gateway HTTP API + Go Lambda (Polly)

Parameters:
  ProjectName:
    Type: String
    Default: talking-avatar
  PollyVoice:
    Type: String
    Default: Joanna
  RendererImageUri:
    Type: String
    Default: 775204092163.dkr.ecr.ap-southeast-2.amazonaws.com/talking-avatar-renderer:0.0.2
    Description: ECR image URI
  RenderWidth:
    Type: String
    Default: "512"
  RenderHeight:
    Type: String
    Default: "512"
  RenderFps:
    Type: String
    Default: "15"
  RendererCpu:
    Type: String
    Default: "1 vCPU"
    AllowedValues: ["1 vCPU","2 vCPU","4 vCPU"]
  RendererMemory:
    Type: String
    Default: "2 GB"
    AllowedValues: ["2 GB","3 GB","4 GB","8 GB"]
  AutoDeploymentsEnabled:
    Type: String
    Default: "true"
    AllowedValues: ["true","false"]
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: vpc-d83278bd
  PublicSubnetId1:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-cb3d06ae
  PublicSubnetId2:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-9380bed5
  AnimatorImageUri:
    Type: String
    Default: 775204092163.dkr.ecr.ap-southeast-2.amazonaws.com/talking-avatar-animator:0.0.1
  InstanceType:
    Type: String
    Default: g6f.2xlarge
    AllowedValues:
      - g6f.xlarge
      - g6f.2xlarge
      - g6f.4xlarge
      - g6.xlarge
      - g5.xlarge
  UbuntuAmiId:
    Type: AWS::EC2::Image::Id
    Default: ami-0e7a5785ab62399cb
  ContainerPort:
    Type: Number
    Default: 8000
  DesiredCapacity:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 3
  Timezone:
    Type: String
    Default: Australia/Sydney

Resources:
  # -------------------- Lambda Function --------------------
  HealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-health
      Runtime: provided.al2023
      Handler: health
      CodeUri: backend/build/
      Events:
        Api:
          Type: Api
          Properties:
            Path: /health
            Method: GET
            RestApiId:
              Ref: Endpoints

  ChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-chat
      Runtime: provided.al2023
      Handler: chat
      CodeUri: backend/build/
      Events:
        Api:
          Type: Api
          Properties:
            Path: /chat
            Method: POST
            RestApiId:
              Ref: Endpoints
      Environment:
        Variables:
          POLLY_VOICE: !Ref PollyVoice
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - polly:SynthesizeSpeech
            Resource: "*"

  UploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-upload-url
      Runtime: provided.al2023
      Handler: upload-url
      CodeUri: backend/build/
      Events:
        Api:
          Type: Api
          Properties:
            Path: /upload-url
            Method: POST
            RestApiId:
              Ref: Endpoints
      Environment:
        Variables:
          ASSETS_BUCKET: !Ref AssetsBucket
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub ${AssetsBucket.Arn}/*

  AvatarFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-avatar
      Runtime: provided.al2023
      Handler: avatar
      CodeUri: backend/build/
      Timeout: 60
      MemorySize: 512
      Events:
        Api:
          Type: Api
          Properties:
            Path: /avatar
            Method: POST
            RestApiId:
              Ref: Endpoints
      Environment:
        Variables:
          ASSETS_BUCKET: !Ref AssetsBucket
          BEDROCK_REGION: us-east-1
          IMAGE_MODEL_ID: amazon.titan-image-generator-v1
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource:
              - !Sub arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-image-generator-v1
        - Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: !Sub ${AssetsBucket.Arn}/*

  # -------------------- API Gateway (HTTP API) --------------------

  Endpoints:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Latest
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,Authorization,X-Requested-With'"
        AllowMethods: "'GET,POST,OPTIONS'"
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        paths:
          /health:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HealthFunction.Arn}/invocations
              responses: {}
          /chat:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatFunction.Arn}/invocations
              responses: {}
          /upload-url:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadUrlFunction.Arn}/invocations
              responses: {}
          /avatar:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AvatarFunction.Arn}/invocations
              responses: {}

  # -------------------- Renderer --------------------

  RendererECRAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-ecr-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: build.apprunner.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  RendererInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-instance-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: tasks.apprunner.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3ReadAssets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub ${AssetsBucket.Arn}/*

  RendererService:
    Type: AWS::AppRunner::Service
    Properties:
      ServiceName: !Sub ${ProjectName}-renderer
      SourceConfiguration:
        ImageRepository:
          ImageIdentifier: !Ref RendererImageUri
          ImageRepositoryType: ECR
          ImageConfiguration:
            Port: '8080'
            RuntimeEnvironmentVariables:
              - Name: NODE_ENV
                Value: production
              - Name: ASSETS_BUCKET
                Value: !Ref AssetsBucket
              - Name: WIDTH
                Value: !Ref RenderWidth
              - Name: HEIGHT
                Value: !Ref RenderHeight
              - Name: FPS
                Value: !Ref RenderFps
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt RendererECRAccessRole.Arn
        AutoDeploymentsEnabled: !Ref AutoDeploymentsEnabled
      InstanceConfiguration:
        Cpu: !Ref RendererCpu
        Memory: !Ref RendererMemory
        InstanceRoleArn: !GetAtt RendererInstanceRole.Arn
      HealthCheckConfiguration:
        Protocol: HTTP
        Path: /
        Interval: 10
        Timeout: 5
        HealthyThreshold: 1
        UnhealthyThreshold: 5

  # -------------------- Animator --------------------

  AnimatorALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ProjectName}-animator-alb-sg
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: HTTP from anywhere (demo)
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  AnimatorEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ProjectName}-animator-ec2-sg
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: ALB to container
          IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref AnimatorALBSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  AnimatorALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-animator-alb
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnetId1, !Ref PublicSubnetId2]
      SecurityGroups: [!Ref AnimatorALBSG]

  AnimatorTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-animator-tg
      TargetType: instance
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: '200'

  AnimatorALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AnimatorALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AnimatorTG

  AnimatorInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-animator-ec2-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: AnimatorEC2Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ECRPull
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:DescribeImages
                Resource: "*"
              - Sid: S3ReadAssets
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub ${AssetsBucket.Arn}/*
              - Sid: S3ReadEc2LinuxNvidiaDrivers
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::ec2-linux-nvidia-drivers
                  - arn:aws:s3:::ec2-linux-nvidia-drivers/*
              - Sid: CWLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  AnimatorInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref AnimatorInstanceRole]

  AnimatorLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-animator-lt
      LaunchTemplateData:
        ImageId: !Ref UbuntuAmiId
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt AnimatorInstanceProfile.Arn
        MetadataOptions:
          HttpTokens: required
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs: { VolumeSize: 200, VolumeType: gp3, DeleteOnTermination: true }
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref AnimatorEC2SG
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            REGION=${AWS::Region}
            ACCOUNT_ID=${AWS::AccountId}
            IMAGE_URI='${AnimatorImageUri}'
            PORT='${ContainerPort}'

            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y awscli build-essential dkms linux-headers-$(uname -r) ca-certificates curl gnupg jq

            # Blacklist nouveau and rebuild initramfs; reboot once (ensures clean driver bind)
            echo "blacklist nouveau" > /etc/modprobe.d/blacklist-nouveau.conf
            echo "options nouveau modeset=0" >> /etc/modprobe.d/blacklist-nouveau.conf
            update-initramfs -u

            # Write post-reboot provisioner
            install -d -m 0755 /opt/animator
            cat >/opt/animator/provision.sh <<'SCRIPT'
            #!/bin/bash -xe
            exec > >(tee -a /var/log/post-provision.log) 2>&1

            REGION='${AWS::Region}'
            ACCOUNT_ID='${AWS::AccountId}'
            IMAGE_URI='${AnimatorImageUri}'
            PORT='${ContainerPort}'

            # --- Install GRID (vGPU) driver (required for G6f) ---
            mkdir -p /tmp/nvidia-grid && cd /tmp/nvidia-grid
            aws s3 cp --recursive s3://ec2-linux-nvidia-drivers/latest/ .
            chmod +x NVIDIA-Linux-x86_64-*-grid-aws.run
            sh ./NVIDIA-Linux-x86_64-*-grid-aws.run -s --no-cc-version-check
            modprobe nvidia || true
            nvidia-smi || { echo "nvidia-smi failed"; tail -n 200 /var/log/nvidia-installer.log || true; dmesg | tail -n 200 || true; exit 1; }

            # --- NVIDIA Container Toolkit + Docker ---
            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /etc/apt/keyrings/nvidia-container-toolkit.gpg
            curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list \
              | sed 's#deb https://#deb [signed-by=/etc/apt/keyrings/nvidia-container-toolkit.gpg] https://#' \
              | tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
            apt-get update
            apt-get install -y docker.io nvidia-container-toolkit
            nvidia-ctk runtime configure --runtime=docker
            systemctl enable --now docker
            systemctl restart docker

            # --- ECR login & systemd unit for animator ---
            aws ecr get-login-password --region $REGION \
              | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com

            cat >/etc/systemd/system/animator.service <<UNIT
            [Unit]
            Description=Animator GPU service
            After=docker.service
            Requires=docker.service

            [Service]
            Restart=always
            RestartSec=5
            Environment=PORT=$PORT
            ExecStart=/usr/bin/docker run --rm --gpus all --name animator -p $PORT:$PORT \
              -e AWS_REGION=$REGION \
              $IMAGE_URI
            ExecStop=/usr/bin/docker stop animator

            [Install]
            WantedBy=multi-user.target
            UNIT

            systemctl daemon-reload
            systemctl enable --now animator.service
            SCRIPT
            chmod +x /opt/animator/provision.sh

            # One-shot unit to run after reboot
            cat >/etc/systemd/system/post-reboot-provision.service <<'UNIT'
            [Unit]
            Description=Post-reboot provision (GRID driver, container runtime, animator)
            After=network-online.target
            Wants=network-online.target

            [Service]
            Type=oneshot
            ExecStart=/opt/animator/provision.sh
            RemainAfterExit=no

            [Install]
            WantedBy=multi-user.target
            UNIT

            systemctl enable post-reboot-provision.service

            # Reboot to apply nouveau blacklist and finish provisioning
            (sleep 3; reboot) &

  AnimatorASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PublicSubnetId1, !Ref PublicSubnetId2]
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: !Ref DesiredCapacity
      LaunchTemplate:
        LaunchTemplateId: !Ref AnimatorLaunchTemplate
        Version: !GetAtt AnimatorLaunchTemplate.LatestVersionNumber
      TargetGroupARNs: [!Ref AnimatorTG]
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-animator
          PropagateAtLaunch: true

  # -------------------- S3 bucket for assets --------------------

  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-${AWS::AccountId}-assets
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [GET, PUT, HEAD]
            AllowedOrigins: ['*']
            AllowedHeaders: ['*']
            ExposedHeaders: ['ETag']
            MaxAge: 3000

  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AssetsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceTLSONLY
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub ${AssetsBucket.Arn}
              - !Sub ${AssetsBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  # -------------------- S3 bucket for SPA --------------------

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-${AWS::AccountId}-web
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      VersioningConfiguration:
        Status: Enabled

  # OAC for CloudFront to access S3
  CFOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: !Sub OAC for ${ProjectName}
        Name: !Sub ${ProjectName}-oac
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !GetAtt CFOriginAccessControl.Id
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontRead
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${WebsiteBucket.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

Outputs:
  APIBaseUrl:
    Value: !Sub "https://${Endpoints}.execute-api.${AWS::Region}.amazonaws.com/Latest"
  WebsiteBucket:
    Value: !Ref WebsiteBucket
  CloudFrontDistributionId:
    Value: !Ref CloudFrontDistribution
  CloudFrontDomainName:
    Value: !GetAtt CloudFrontDistribution.DomainName
  RendererServiceArn:
    Value: !GetAtt RendererService.ServiceArn
  RendererServiceUrl:
    Value: !GetAtt RendererService.ServiceUrl
  AnimatorURL:
    Description: Public URL of the Animator service (HTTP)
    Value: !Sub http://${AnimatorALB.DNSName}
