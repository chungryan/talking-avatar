AWSTemplateFormatVersion: '2010-09-09'
Description: Talking Avatar â€“ S3+CloudFront (SPA) + API Gateway HTTP API + Go Lambda (Polly)

Parameters:
  ProjectName:
    Type: String
    Default: talking-avatar
  ArtifactBucket:
    Type: String
    Description: Existing S3 bucket that contains the Lambda artifact zip
  LambdaArtifactKey:
    Type: String
    Default: backend/lambda.zip
  PollyVoice:
    Type: String
    Default: Joanna

Resources:
  # -------------------- Lambda Role --------------------
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: polly-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: polly:SynthesizeSpeech
                Resource: '*'

  # -------------------- Lambda Function --------------------
  ChatFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-chat
      Role: !GetAtt LambdaRole.Arn
      Runtime: provided.al2
      Handler: bootstrap
      Architectures: [x86_64]
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref LambdaArtifactKey
      Environment:
        Variables:
          POLLY_VOICE: !Ref PollyVoice

  # -------------------- API Gateway (HTTP API) --------------------
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${ProjectName}-api
      ProtocolType: HTTP
      CorsConfiguration:
        AllowMethods: [GET, POST]
        AllowOrigins: ['*']
        AllowHeaders: ['content-type']

  ChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatFunction.Arn}/invocations
      PayloadFormatVersion: '2.0'

  RouteHealth:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'GET /health'
      Target: !Sub integrations/${ChatIntegration}

  RouteChat:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /chat'
      Target: !Sub integrations/${ChatIntegration}

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: '$default'
      AutoDeploy: true

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ChatFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*

  # -------------------- S3 bucket for SPA --------------------
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-${AWS::AccountId}-web
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      VersioningConfiguration:
        Status: Enabled

  # OAC for CloudFront to access S3
  CFOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: !Sub OAC for ${ProjectName}
        Name: !Sub ${ProjectName}-oac
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !GetAtt CFOriginAccessControl.Id
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontRead
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${WebsiteBucket.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

Outputs:
  APIBaseUrl:
    Value: !GetAtt HttpApi.ApiEndpoint
  WebsiteBucket:
    Value: !Ref WebsiteBucket
  CloudFrontDistributionId:
    Value: !Ref CloudFrontDistribution
  CloudFrontDomainName:
    Value: !GetAtt CloudFrontDistribution.DomainName
